{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/lib/api.ts"],"sourcesContent":["/**\r\n * As this file is reused in several other files, try to keep it lean and small.\r\n * Importing other npm packages here could lead to needlessly increasing the client bundle size, or end up in a server-only function that don't need it.\r\n */\r\n\r\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\r\n  if (v === undefined) {\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  return v;\r\n}\r\n\r\nexport const dataset = assertValue(\r\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\r\n  \"Missing environment variable: NEXT_PUBLIC_SANITY_DATASET\",\r\n);\r\n\r\nexport const projectId = assertValue(\r\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\r\n  \"Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID\",\r\n);\r\n\r\n/**\r\n * see https://www.sanity.io/docs/api-versioning for how versioning works\r\n */\r\nexport const apiVersion =\r\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || \"2024-02-28\";\r\n\r\n/**\r\n * Used to configure edit intent links, for Presentation Mode, as well as to configure where the Studio is mounted in the router.\r\n */\r\nexport const studioUrl = \"/studio\";\r\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAWC;AATF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;AAEO,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAMK,MAAM,aACX,iUAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI;AAKzC,MAAM,YAAY"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/plugins/settings.tsx"],"sourcesContent":["/**\r\n * This plugin contains all the logic for setting up the singletons\r\n */\r\n\r\nimport { definePlugin, type DocumentDefinition } from \"sanity\";\r\nimport { type StructureResolver } from \"sanity/structure\";\r\n\r\nexport const singletonPlugin = definePlugin((types: string[]) => {\r\n  return {\r\n    name: \"singletonPlugin\",\r\n    document: {\r\n      // Hide 'Singletons (such as Settings)' from new document options\r\n      // https://user-images.githubusercontent.com/81981/195728798-e0c6cf7e-d442-4e58-af3a-8cd99d7fcc28.png\r\n      newDocumentOptions: (prev, { creationContext, ...rest }) => {\r\n        if (creationContext.type === \"global\") {\r\n          return prev.filter(\r\n            (templateItem) => !types.includes(templateItem.templateId),\r\n          );\r\n        }\r\n\r\n        return prev;\r\n      },\r\n      // Removes the \"duplicate\" action on the Singletons (such as Home)\r\n      actions: (prev, { schemaType }) => {\r\n        if (types.includes(schemaType)) {\r\n          return prev.filter(({ action }) => action !== \"duplicate\");\r\n        }\r\n\r\n        return prev;\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\n// The StructureResolver is how we're changing the DeskTool structure to linking to document (named Singleton)\r\n// like how \"Home\" is handled.\r\nexport const pageStructure = (\r\n  typeDefArray: DocumentDefinition[],\r\n): StructureResolver => {\r\n  return (S) => {\r\n    // Goes through all of the singletons that were provided and translates them into something the\r\n    // Structure tool can understand\r\n    const singletonItems = typeDefArray.map((typeDef) => {\r\n      return S.listItem()\r\n        .title(typeDef.title!)\r\n        .icon(typeDef.icon)\r\n        .child(\r\n          S.editor()\r\n            .id(typeDef.name)\r\n            .schemaType(typeDef.name)\r\n            .documentId(typeDef.name),\r\n        );\r\n    });\r\n\r\n    // The default root list items (except custom ones)\r\n    const defaultListItems = S.documentTypeListItems().filter(\r\n      (listItem) =>\r\n        !typeDefArray.find((singleton) => singleton.name === listItem.getId()),\r\n    );\r\n\r\n    return S.list()\r\n      .title(\"Content\")\r\n      .items([...singletonItems, S.divider(), ...defaultListItems]);\r\n  };\r\n};\r\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAED;;AAGO,MAAM,kBAAkB,CAAA,GAAA,+WAAA,CAAA,eAAY,AAAD,EAAE,CAAC;IAC3C,OAAO;QACL,MAAM;QACN,UAAU;YACR,iEAAiE;YACjE,qGAAqG;YACrG,oBAAoB,CAAC,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM;gBACrD,IAAI,gBAAgB,IAAI,KAAK,UAAU;oBACrC,OAAO,KAAK,MAAM,CAChB,CAAC,eAAiB,CAAC,MAAM,QAAQ,CAAC,aAAa,UAAU;gBAE7D;gBAEA,OAAO;YACT;YACA,kEAAkE;YAClE,SAAS,CAAC,MAAM,EAAE,UAAU,EAAE;gBAC5B,IAAI,MAAM,QAAQ,CAAC,aAAa;oBAC9B,OAAO,KAAK,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,GAAK,WAAW;gBAChD;gBAEA,OAAO;YACT;QACF;IACF;AACF;AAIO,MAAM,gBAAgB,CAC3B;IAEA,OAAO,CAAC;QACN,+FAA+F;QAC/F,gCAAgC;QAChC,MAAM,iBAAiB,aAAa,GAAG,CAAC,CAAC;YACvC,OAAO,EAAE,QAAQ,GACd,KAAK,CAAC,QAAQ,KAAK,EACnB,IAAI,CAAC,QAAQ,IAAI,EACjB,KAAK,CACJ,EAAE,MAAM,GACL,EAAE,CAAC,QAAQ,IAAI,EACf,UAAU,CAAC,QAAQ,IAAI,EACvB,UAAU,CAAC,QAAQ,IAAI;QAEhC;QAEA,mDAAmD;QACnD,MAAM,mBAAmB,EAAE,qBAAqB,GAAG,MAAM,CACvD,CAAC,WACC,CAAC,aAAa,IAAI,CAAC,CAAC,YAAc,UAAU,IAAI,KAAK,SAAS,KAAK;QAGvE,OAAO,EAAE,IAAI,GACV,KAAK,CAAC,WACN,KAAK,CAAC;eAAI;YAAgB,EAAE,OAAO;eAAO;SAAiB;IAChE;AACF"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/schemas/documents/author.ts"],"sourcesContent":["import { UserIcon } from \"@sanity/icons\";\r\nimport { defineField, defineType } from \"sanity\";\r\n\r\nexport default defineType({\r\n  name: \"author\",\r\n  title: \"Author\",\r\n  icon: UserIcon,\r\n  type: \"document\",\r\n  fields: [\r\n    defineField({\r\n      name: \"name\",\r\n      title: \"Name\",\r\n      type: \"string\",\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n    defineField({\r\n      name: \"picture\",\r\n      title: \"Picture\",\r\n      type: \"image\",\r\n      fields: [\r\n        {\r\n          name: \"alt\",\r\n          type: \"string\",\r\n          title: \"Alternative text\",\r\n          description: \"Important for SEO and accessiblity.\",\r\n          validation: (rule) => {\r\n            return rule.custom((alt, context) => {\r\n              if ((context.document?.picture as any)?.asset?._ref && !alt) {\r\n                return \"Required\";\r\n              }\r\n              return true;\r\n            });\r\n          },\r\n        },\r\n      ],\r\n      options: {\r\n        hotspot: true,\r\n        aiAssist: {\r\n          imageDescriptionField: \"alt\",\r\n        },\r\n      },\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n  ],\r\n});\r\n"],"names":[],"mappings":";;;AACA;AADA;;;uCAGe,CAAA,GAAA,yOAAA,CAAA,aAAU,AAAD,EAAE;IACxB,MAAM;IACN,OAAO;IACP,MAAM,yOAAA,CAAA,WAAQ;IACd,MAAM;IACN,QAAQ;QACN,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,QAAQ;gBACN;oBACE,MAAM;oBACN,MAAM;oBACN,OAAO;oBACP,aAAa;oBACb,YAAY,CAAC;wBACX,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK;4BACvB,IAAI,AAAC,QAAQ,QAAQ,EAAE,SAAiB,OAAO,QAAQ,CAAC,KAAK;gCAC3D,OAAO;4BACT;4BACA,OAAO;wBACT;oBACF;gBACF;aACD;YACD,SAAS;gBACP,SAAS;gBACT,UAAU;oBACR,uBAAuB;gBACzB;YACF;YACA,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;KACD;AACH"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/schemas/documents/post.ts"],"sourcesContent":["import { DocumentTextIcon } from \"@sanity/icons\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { defineField, defineType } from \"sanity\";\r\n\r\nimport authorType from \"./author\";\r\n\r\n/**\r\n * This file is the schema definition for a post.\r\n *\r\n * Here you'll be able to edit the different fields that appear when you \r\n * create or edit a post in the studio.\r\n * \r\n * Here you can see the different schema types that are available:\r\n\r\n  https://www.sanity.io/docs/schema-types\r\n\r\n */\r\n\r\nexport default defineType({\r\n  name: \"post\",\r\n  title: \"Post\",\r\n  icon: DocumentTextIcon,\r\n  type: \"document\",\r\n  fields: [\r\n    defineField({\r\n      name: \"title\",\r\n      title: \"Title\",\r\n      type: \"string\",\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n    defineField({\r\n      name: \"slug\",\r\n      title: \"Slug\",\r\n      type: \"slug\",\r\n      description: \"A slug is required for the post to show up in the preview\",\r\n      options: {\r\n        source: \"title\",\r\n        maxLength: 96,\r\n        isUnique: (value, context) => context.defaultIsUnique(value, context),\r\n      },\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n    defineField({\r\n      name: \"content\",\r\n      title: \"Content\",\r\n      type: \"array\",\r\n      of: [{ type: \"block\" }],\r\n    }),\r\n    defineField({\r\n      name: \"excerpt\",\r\n      title: \"Excerpt\",\r\n      type: \"text\",\r\n    }),\r\n    defineField({\r\n      name: \"coverImage\",\r\n      title: \"Cover Image\",\r\n      type: \"image\",\r\n      options: {\r\n        hotspot: true,\r\n        aiAssist: {\r\n          imageDescriptionField: \"alt\",\r\n        },\r\n      },\r\n      fields: [\r\n        {\r\n          name: \"alt\",\r\n          type: \"string\",\r\n          title: \"Alternative text\",\r\n          description: \"Important for SEO and accessiblity.\",\r\n          validation: (rule) => {\r\n            return rule.custom((alt, context) => {\r\n              if ((context.document?.coverImage as any)?.asset?._ref && !alt) {\r\n                return \"Required\";\r\n              }\r\n              return true;\r\n            });\r\n          },\r\n        },\r\n      ],\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n    defineField({\r\n      name: \"date\",\r\n      title: \"Date\",\r\n      type: \"datetime\",\r\n      initialValue: () => new Date().toISOString(),\r\n    }),\r\n    defineField({\r\n      name: \"author\",\r\n      title: \"Author\",\r\n      type: \"reference\",\r\n      to: [{ type: authorType.name }],\r\n    }),\r\n  ],\r\n  preview: {\r\n    select: {\r\n      title: \"title\",\r\n      author: \"author.name\",\r\n      date: \"date\",\r\n      media: \"coverImage\",\r\n    },\r\n    prepare({ title, media, author, date }) {\r\n      const subtitles = [\r\n        author && `by ${author}`,\r\n        date && `on ${format(parseISO(date), \"LLL d, yyyy\")}`,\r\n      ].filter(Boolean);\r\n\r\n      return { title, media, subtitle: subtitles.join(\" \") };\r\n    },\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;AAIA;AAFA;AAFA;AACA;AAAA;;;;;uCAiBe,CAAA,GAAA,yOAAA,CAAA,aAAU,AAAD,EAAE;IACxB,MAAM;IACN,OAAO;IACP,MAAM,yOAAA,CAAA,mBAAgB;IACtB,MAAM;IACN,QAAQ;QACN,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,aAAa;YACb,SAAS;gBACP,QAAQ;gBACR,WAAW;gBACX,UAAU,CAAC,OAAO,UAAY,QAAQ,eAAe,CAAC,OAAO;YAC/D;YACA,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,IAAI;gBAAC;oBAAE,MAAM;gBAAQ;aAAE;QACzB;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;QACR;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,SAAS;gBACP,SAAS;gBACT,UAAU;oBACR,uBAAuB;gBACzB;YACF;YACA,QAAQ;gBACN;oBACE,MAAM;oBACN,MAAM;oBACN,OAAO;oBACP,aAAa;oBACb,YAAY,CAAC;wBACX,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK;4BACvB,IAAI,AAAC,QAAQ,QAAQ,EAAE,YAAoB,OAAO,QAAQ,CAAC,KAAK;gCAC9D,OAAO;4BACT;4BACA,OAAO;wBACT;oBACF;gBACF;aACD;YACD,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,cAAc,IAAM,IAAI,OAAO,WAAW;QAC5C;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,IAAI;gBAAC;oBAAE,MAAM,2IAAA,CAAA,UAAU,CAAC,IAAI;gBAAC;aAAE;QACjC;KACD;IACD,SAAS;QACP,QAAQ;YACN,OAAO;YACP,QAAQ;YACR,MAAM;YACN,OAAO;QACT;QACA,SAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE;YACpC,MAAM,YAAY;gBAChB,UAAU,CAAC,GAAG,EAAE,QAAQ;gBACxB,QAAQ,CAAC,GAAG,EAAE,CAAA,GAAA,gNAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,kMAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,gBAAgB;aACtD,CAAC,MAAM,CAAC;YAET,OAAO;gBAAE;gBAAO;gBAAO,UAAU,UAAU,IAAI,CAAC;YAAK;QACvD;IACF;AACF"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/plugins/assist.ts"],"sourcesContent":["/**\r\n * Sets up the AI Assist plugin with preset prompts for content creation\r\n */\r\n\r\nimport { assist } from \"@sanity/assist\";\r\n\r\nimport postType from \"../schemas/documents/post\";\r\n\r\nexport const assistWithPresets = () =>\r\n  assist({\r\n    __presets: {\r\n      [postType.name]: {\r\n        fields: [\r\n          {\r\n            /**\r\n             * Creates Portable Text `content` blocks from the `title` field\r\n             */\r\n            path: \"content\",\r\n            instructions: [\r\n              {\r\n                _key: \"preset-instruction-1\",\r\n                title: \"Generate sample content\",\r\n                icon: \"block-content\",\r\n                prompt: [\r\n                  {\r\n                    _key: \"86e70087d4d5\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"Given the draft title \",\r\n                        _key: \"6b5d5d6a63cf0\",\r\n                      },\r\n                      {\r\n                        path: \"title\",\r\n                        _type: \"sanity.assist.instruction.fieldRef\",\r\n                        _key: \"0132742d463b\",\r\n                      },\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \" of a blog post, generate a comprehensive and engaging sample content that spans the length of one to two A4 pages. The content should be structured, informative, and tailored to the subject matter implied by the title, whether it be travel, software engineering, fashion, politics, or any other theme. The text will be displayed below the \",\r\n                        _key: \"a02c9ab4eb2d\",\r\n                      },\r\n                      {\r\n                        _type: \"sanity.assist.instruction.fieldRef\",\r\n                        _key: \"f208ef240062\",\r\n                        path: \"title\",\r\n                      },\r\n                      {\r\n                        text: \" and doesn't need to repeat it in the text. The generated text should include the following elements:\",\r\n                        _key: \"8ecfa74a8487\",\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                  },\r\n                  {\r\n                    style: \"normal\",\r\n                    _key: \"e4dded41ea89\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"1. Introduction: A brief paragraph that captures the essence of the blog post, hooks the reader with intriguing insights, and outlines the purpose of the post.\",\r\n                        _key: \"cc5ef44a2fb5\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                  },\r\n                  {\r\n                    style: \"normal\",\r\n                    _key: \"585e8de2fe35\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"2. Main Body:\",\r\n                        _key: \"fab36eb7c541\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                  },\r\n                  {\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"e96b89ef6357\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"- For thematic consistency, divide the body into several sections with subheadings that explore different facets of the topic.\",\r\n                        _key: \"b685a310a0ff\",\r\n                      },\r\n                    ],\r\n                  },\r\n                  {\r\n                    children: [\r\n                      {\r\n                        marks: [],\r\n                        text: \"- Include engaging and informative content such as personal anecdotes (for travel or fashion blogs), technical explanations or tutorials (for software engineering blogs), satirical or humorous observations (for shitposting), or well-argued positions (for political blogs).\",\r\n                        _key: \"c7468d106c91\",\r\n                        _type: \"span\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"ce4acdb00da9\",\r\n                    markDefs: [],\r\n                  },\r\n                  {\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"fb4572e65833\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"- \",\r\n                        _key: \"5358f261dce4\",\r\n                      },\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \" observations (for shitposting), or well-argued positions (for political blogs).\",\r\n                        _key: \"50792c6d0f77\",\r\n                      },\r\n                    ],\r\n                  },\r\n                  {\r\n                    children: [\r\n                      {\r\n                        marks: [],\r\n                        text: \"Where applicable, incorporate bullet points or numbered lists to break down complex information, steps in a process, or key highlights.\",\r\n                        _key: \"3b891d8c1dde0\",\r\n                        _type: \"span\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"9364b67074ce\",\r\n                    markDefs: [],\r\n                  },\r\n                  {\r\n                    _key: \"a6ba7579cd66\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"3. Conclusion: Summarize the main points discussed in the post, offer final thoughts or calls to action, and invite readers to engage with the content through comments or social media sharing.\",\r\n                        _key: \"1280f11d499d\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                  },\r\n                  {\r\n                    style: \"normal\",\r\n                    _key: \"719a79eb4c1c\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        marks: [],\r\n                        text: \"4. Engagement Prompts: Conclude with questions or prompts that encourage readers to share their experiences, opinions, or questions related to the blog post's topic, but keep in mind there is no Comments field below the blog post.\",\r\n                        _key: \"f1512086bab6\",\r\n                        _type: \"span\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                  },\r\n                  {\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"4a1c586fd44a\",\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        marks: [],\r\n                        text: \"Ensure the generated content maintains a balance between being informative and entertaining, to capture the interest of a wide audience. The sample content should serve as a solid foundation that can be further customized or expanded upon by the blog author to finalize the post.\",\r\n                        _key: \"697bbd03cb110\",\r\n                        _type: \"span\",\r\n                      },\r\n                    ],\r\n                  },\r\n                  {\r\n                    children: [\r\n                      {\r\n                        marks: [],\r\n                        text: 'Don\\'t prefix each section with \"Introduction\", \"Main Body\", \"Conclusion\" or \"Engagement Prompts\"',\r\n                        _key: \"d20bb9a03b0d\",\r\n                        _type: \"span\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"b072b3c62c3c\",\r\n                    markDefs: [],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            /**\r\n             * Summarize content into the `excerpt` field\r\n             */\r\n            path: \"excerpt\",\r\n            instructions: [\r\n              {\r\n                _key: \"preset-instruction-2\",\r\n                title: \"Summarize content\",\r\n                icon: \"blockquote\",\r\n                prompt: [\r\n                  {\r\n                    markDefs: [],\r\n                    children: [\r\n                      {\r\n                        _key: \"650a0dcc327d\",\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \"Create a short excerpt based on \",\r\n                      },\r\n                      {\r\n                        path: \"content\",\r\n                        _type: \"sanity.assist.instruction.fieldRef\",\r\n                        _key: \"c62d14c73496\",\r\n                      },\r\n                      {\r\n                        _key: \"38e043efa606\",\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \" that doesn't repeat what's already in the \",\r\n                      },\r\n                      {\r\n                        path: \"title\",\r\n                        _type: \"sanity.assist.instruction.fieldRef\",\r\n                        _key: \"445e62dda246\",\r\n                      },\r\n                      {\r\n                        _key: \"98cce773915e\",\r\n                        _type: \"span\",\r\n                        marks: [],\r\n                        text: \" . Consider the UI has limited horizontal space and try to avoid too many line breaks and make it as short, terse and brief as possible. At best a single sentence, at most two sentences.\",\r\n                      },\r\n                    ],\r\n                    _type: \"block\",\r\n                    style: \"normal\",\r\n                    _key: \"392c618784b0\",\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAID;AAFA;;;AAIO,MAAM,oBAAoB,IAC/B,CAAA,GAAA,0WAAA,CAAA,SAAM,AAAD,EAAE;QACL,WAAW;YACT,CAAC,yIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,EAAE;gBACf,QAAQ;oBACN;wBACE;;aAEC,GACD,MAAM;wBACN,cAAc;4BACZ;gCACE,MAAM;gCACN,OAAO;gCACP,MAAM;gCACN,QAAQ;oCACN;wCACE,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,OAAO;gDACP,MAAM;4CACR;4CACA;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;4CACA;gDACE,OAAO;gDACP,MAAM;gDACN,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,MAAM;gDACN,OAAO;gDACP,OAAO,EAAE;4CACX;yCACD;wCACD,OAAO;wCACP,OAAO;oCACT;oCACA;wCACE,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;yCACD;wCACD,OAAO;oCACT;oCACA;wCACE,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;yCACD;wCACD,OAAO;oCACT;oCACA;wCACE,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;yCACD;oCACH;oCACA;wCACE,UAAU;4CACR;gDACE,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;gDACN,OAAO;4CACT;yCACD;wCACD,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;oCACd;oCACA;wCACE,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;4CACA;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;yCACD;oCACH;oCACA;wCACE,UAAU;4CACR;gDACE,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;gDACN,OAAO;4CACT;yCACD;wCACD,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;oCACd;oCACA;wCACE,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;4CACR;yCACD;wCACD,OAAO;wCACP,OAAO;oCACT;oCACA;wCACE,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;gDACN,OAAO;4CACT;yCACD;wCACD,OAAO;oCACT;oCACA;wCACE,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;gDACN,OAAO;4CACT;yCACD;oCACH;oCACA;wCACE,UAAU;4CACR;gDACE,OAAO,EAAE;gDACT,MAAM;gDACN,MAAM;gDACN,OAAO;4CACT;yCACD;wCACD,OAAO;wCACP,OAAO;wCACP,MAAM;wCACN,UAAU,EAAE;oCACd;iCACD;4BACH;yBACD;oBACH;oBACA;wBACE;;aAEC,GACD,MAAM;wBACN,cAAc;4BACZ;gCACE,MAAM;gCACN,OAAO;gCACP,MAAM;gCACN,QAAQ;oCACN;wCACE,UAAU,EAAE;wCACZ,UAAU;4CACR;gDACE,MAAM;gDACN,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,OAAO;gDACP,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,OAAO;gDACP,MAAM;4CACR;4CACA;gDACE,MAAM;gDACN,OAAO;gDACP,OAAO,EAAE;gDACT,MAAM;4CACR;yCACD;wCACD,OAAO;wCACP,OAAO;wCACP,MAAM;oCACR;iCACD;4BACH;yBACD;oBACH;iBACD;YACH;QACF;IACF"}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/lib/demo.ts"],"sourcesContent":["/**\r\n * Demo data used as placeholders and initial values for the blog\r\n */\r\n\r\nexport const title = \"Blog.\";\r\n\r\nexport const description = [\r\n  {\r\n    _key: \"9f1a629887fd\",\r\n    _type: \"block\",\r\n    children: [\r\n      {\r\n        _key: \"4a58edd077880\",\r\n        _type: \"span\",\r\n        marks: [],\r\n        text: \"A statically generated blog example using \",\r\n      },\r\n      {\r\n        _key: \"4a58edd077881\",\r\n        _type: \"span\",\r\n        marks: [\"ec5b66c9b1e0\"],\r\n        text: \"Next.js\",\r\n      },\r\n      {\r\n        _key: \"4a58edd077882\",\r\n        _type: \"span\",\r\n        marks: [],\r\n        text: \" and \",\r\n      },\r\n      {\r\n        _key: \"4a58edd077883\",\r\n        _type: \"span\",\r\n        marks: [\"1f8991913ea8\"],\r\n        text: \"Sanity\",\r\n      },\r\n      {\r\n        _key: \"4a58edd077884\",\r\n        _type: \"span\",\r\n        marks: [],\r\n        text: \".\",\r\n      },\r\n    ],\r\n    markDefs: [\r\n      {\r\n        _key: \"ec5b66c9b1e0\",\r\n        _type: \"link\",\r\n        href: \"https://nextjs.org/\",\r\n      },\r\n      {\r\n        _key: \"1f8991913ea8\",\r\n        _type: \"link\",\r\n        href: \"https://sanity.io/\",\r\n      },\r\n    ],\r\n    style: \"normal\",\r\n  },\r\n];\r\n\r\nexport const ogImageTitle = \"A Next.js Blog with a Native Authoring Experience\";\r\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAEM,MAAM,QAAQ;AAEd,MAAM,cAAc;IACzB;QACE,MAAM;QACN,OAAO;QACP,UAAU;YACR;gBACE,MAAM;gBACN,OAAO;gBACP,OAAO,EAAE;gBACT,MAAM;YACR;YACA;gBACE,MAAM;gBACN,OAAO;gBACP,OAAO;oBAAC;iBAAe;gBACvB,MAAM;YACR;YACA;gBACE,MAAM;gBACN,OAAO;gBACP,OAAO,EAAE;gBACT,MAAM;YACR;YACA;gBACE,MAAM;gBACN,OAAO;gBACP,OAAO;oBAAC;iBAAe;gBACvB,MAAM;YACR;YACA;gBACE,MAAM;gBACN,OAAO;gBACP,OAAO,EAAE;gBACT,MAAM;YACR;SACD;QACD,UAAU;YACR;gBACE,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;YACA;gBACE,MAAM;gBACN,OAAO;gBACP,MAAM;YACR;SACD;QACD,OAAO;IACT;CACD;AAEM,MAAM,eAAe"}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/schemas/singletons/settings.tsx"],"sourcesContent":["import { CogIcon } from \"@sanity/icons\";\r\nimport { defineArrayMember, defineField, defineType } from \"sanity\";\r\n\r\nimport * as demo from \"@/sanity/lib/demo\";\r\n\r\nexport default defineType({\r\n  name: \"settings\",\r\n  title: \"Settings\",\r\n  type: \"document\",\r\n  icon: CogIcon,\r\n  fields: [\r\n    defineField({\r\n      name: \"title\",\r\n      description: \"This field is the title of your blog.\",\r\n      title: \"Title\",\r\n      type: \"string\",\r\n      initialValue: demo.title,\r\n      validation: (rule) => rule.required(),\r\n    }),\r\n    defineField({\r\n      name: \"description\",\r\n      description:\r\n        \"Used both for the <meta> description tag for SEO, and the blog subheader.\",\r\n      title: \"Description\",\r\n      type: \"array\",\r\n      initialValue: demo.description,\r\n      of: [\r\n        defineArrayMember({\r\n          type: \"block\",\r\n          options: {},\r\n          styles: [],\r\n          lists: [],\r\n          marks: {\r\n            decorators: [],\r\n            annotations: [\r\n              defineField({\r\n                type: \"object\",\r\n                name: \"link\",\r\n                fields: [\r\n                  {\r\n                    type: \"string\",\r\n                    name: \"href\",\r\n                    title: \"URL\",\r\n                    validation: (rule) => rule.required(),\r\n                  },\r\n                ],\r\n              }),\r\n            ],\r\n          },\r\n        }),\r\n      ],\r\n    }),\r\n    defineField({\r\n      name: \"footer\",\r\n      description:\r\n        \"This is a block of text that will be displayed at the bottom of the page.\",\r\n      title: \"Footer Info\",\r\n      type: \"array\",\r\n      of: [\r\n        defineArrayMember({\r\n          type: \"block\",\r\n          marks: {\r\n            annotations: [\r\n              {\r\n                name: \"link\",\r\n                type: \"object\",\r\n                title: \"Link\",\r\n                fields: [\r\n                  {\r\n                    name: \"href\",\r\n                    type: \"url\",\r\n                    title: \"Url\",\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        }),\r\n      ],\r\n    }),\r\n    defineField({\r\n      name: \"ogImage\",\r\n      title: \"Open Graph Image\",\r\n      type: \"image\",\r\n      description: \"Displayed on social cards and search engine results.\",\r\n      options: {\r\n        hotspot: true,\r\n        aiAssist: {\r\n          imageDescriptionField: \"alt\",\r\n        },\r\n      },\r\n      fields: [\r\n        defineField({\r\n          name: \"alt\",\r\n          description: \"Important for accessibility and SEO.\",\r\n          title: \"Alternative text\",\r\n          type: \"string\",\r\n          validation: (rule) => {\r\n            return rule.custom((alt, context) => {\r\n              if ((context.document?.ogImage as any)?.asset?._ref && !alt) {\r\n                return \"Required\";\r\n              }\r\n              return true;\r\n            });\r\n          },\r\n        }),\r\n        defineField({\r\n          name: \"metadataBase\",\r\n          type: \"url\",\r\n          description: (\r\n            <a\r\n              href=\"https://nextjs.org/docs/app/api-reference/functions/generate-metadata#metadatabase\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              More information\r\n            </a>\r\n          ),\r\n        }),\r\n      ],\r\n    }),\r\n  ],\r\n  preview: {\r\n    prepare() {\r\n      return {\r\n        title: \"Settings\",\r\n      };\r\n    },\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;;AAGA;AAFA;AADA;;;;;uCAKe,CAAA,GAAA,yOAAA,CAAA,aAAU,AAAD,EAAE;IACxB,MAAM;IACN,OAAO;IACP,MAAM;IACN,MAAM,yOAAA,CAAA,UAAO;IACb,QAAQ;QACN,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,aAAa;YACb,OAAO;YACP,MAAM;YACN,cAAc,yHAAK,KAAK;YACxB,YAAY,CAAC,OAAS,KAAK,QAAQ;QACrC;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,aACE;YACF,OAAO;YACP,MAAM;YACN,cAAc,yHAAK,WAAW;YAC9B,IAAI;gBACF,CAAA,GAAA,yOAAA,CAAA,oBAAiB,AAAD,EAAE;oBAChB,MAAM;oBACN,SAAS,CAAC;oBACV,QAAQ,EAAE;oBACV,OAAO,EAAE;oBACT,OAAO;wBACL,YAAY,EAAE;wBACd,aAAa;4BACX,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;gCACV,MAAM;gCACN,MAAM;gCACN,QAAQ;oCACN;wCACE,MAAM;wCACN,MAAM;wCACN,OAAO;wCACP,YAAY,CAAC,OAAS,KAAK,QAAQ;oCACrC;iCACD;4BACH;yBACD;oBACH;gBACF;aACD;QACH;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,aACE;YACF,OAAO;YACP,MAAM;YACN,IAAI;gBACF,CAAA,GAAA,yOAAA,CAAA,oBAAiB,AAAD,EAAE;oBAChB,MAAM;oBACN,OAAO;wBACL,aAAa;4BACX;gCACE,MAAM;gCACN,MAAM;gCACN,OAAO;gCACP,QAAQ;oCACN;wCACE,MAAM;wCACN,MAAM;wCACN,OAAO;oCACT;iCACD;4BACH;yBACD;oBACH;gBACF;aACD;QACH;QACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;YACV,MAAM;YACN,OAAO;YACP,MAAM;YACN,aAAa;YACb,SAAS;gBACP,SAAS;gBACT,UAAU;oBACR,uBAAuB;gBACzB;YACF;YACA,QAAQ;gBACN,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;oBACV,MAAM;oBACN,aAAa;oBACb,OAAO;oBACP,MAAM;oBACN,YAAY,CAAC;wBACX,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK;4BACvB,IAAI,AAAC,QAAQ,QAAQ,EAAE,SAAiB,OAAO,QAAQ,CAAC,KAAK;gCAC3D,OAAO;4BACT;4BACA,OAAO;wBACT;oBACF;gBACF;gBACA,CAAA,GAAA,yOAAA,CAAA,cAAW,AAAD,EAAE;oBACV,MAAM;oBACN,MAAM;oBACN,2BACE,8VAAC;wBACC,MAAK;wBACL,KAAI;kCACL;;;;;;gBAIL;aACD;QACH;KACD;IACD,SAAS;QACP;YACE,OAAO;gBACL,OAAO;YACT;QACF;IACF;AACF"}},
    {"offset": {"line": 756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity/lib/utils.ts"],"sourcesContent":["import createImageUrlBuilder from \"@sanity/image-url\";\r\n\r\nimport { dataset, projectId } from \"@/sanity/lib/api\";\r\n\r\nconst imageBuilder = createImageUrlBuilder({\r\n  projectId: projectId || \"\",\r\n  dataset: dataset || \"\",\r\n});\r\n\r\nexport const urlForImage = (source: any) => {\r\n  // Ensure that source image contains a valid reference\r\n  if (!source?.asset?._ref) {\r\n    return undefined;\r\n  }\r\n\r\n  return imageBuilder?.image(source).auto(\"format\").fit(\"max\");\r\n};\r\n\r\nexport function resolveOpenGraphImage(image: any, width = 1200, height = 627) {\r\n  if (!image) return;\r\n  const url = urlForImage(image)?.width(1200).height(627).fit(\"crop\").url();\r\n  if (!url) return;\r\n  return { url, alt: image?.alt as string, width, height };\r\n}\r\n\r\nexport function resolveHref(\r\n  documentType?: string,\r\n  slug?: string,\r\n): string | undefined {\r\n  switch (documentType) {\r\n    case \"post\":\r\n      return slug ? `/posts/${slug}` : undefined;\r\n    default:\r\n      console.warn(\"Invalid document type:\", documentType);\r\n      return undefined;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIA,MAAM,eAAe,CAAA,GAAA,yPAAA,CAAA,UAAqB,AAAD,EAAE;IACzC,WAAW,uHAAA,CAAA,YAAS,IAAI;IACxB,SAAS,uHAAA,CAAA,UAAO,IAAI;AACtB;AAEO,MAAM,cAAc,CAAC;IAC1B,sDAAsD;IACtD,IAAI,CAAC,QAAQ,OAAO,MAAM;QACxB,OAAO;IACT;IAEA,OAAO,cAAc,MAAM,QAAQ,KAAK,UAAU,IAAI;AACxD;AAEO,SAAS,sBAAsB,KAAU,EAAE,QAAQ,IAAI,EAAE,SAAS,GAAG;IAC1E,IAAI,CAAC,OAAO;IACZ,MAAM,MAAM,YAAY,QAAQ,MAAM,MAAM,OAAO,KAAK,IAAI,QAAQ;IACpE,IAAI,CAAC,KAAK;IACV,OAAO;QAAE;QAAK,KAAK,OAAO;QAAe;QAAO;IAAO;AACzD;AAEO,SAAS,YACd,YAAqB,EACrB,IAAa;IAEb,OAAQ;QACN,KAAK;YACH,OAAO,OAAO,CAAC,OAAO,EAAE,MAAM,GAAG;QACnC;YACE,QAAQ,IAAI,CAAC,0BAA0B;YACvC,OAAO;IACX;AACF"}},
    {"offset": {"line": 805, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 811, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/sanity.config.ts"],"sourcesContent":["\"use client\";\r\n/**\r\n * This config is used to set up Sanity Studio that's mounted on the `app/(sanity)/studio/[[...tool]]/page.tsx` route\r\n */\r\nimport { visionTool } from \"@sanity/vision\";\r\nimport { PluginOptions, defineConfig } from \"sanity\";\r\nimport { unsplashImageAsset } from \"sanity-plugin-asset-source-unsplash\";\r\nimport {\r\n  presentationTool,\r\n  defineDocuments,\r\n  defineLocations,\r\n  type DocumentLocation,\r\n} from \"sanity/presentation\";\r\nimport { structureTool } from \"sanity/structure\";\r\n\r\nimport { apiVersion, dataset, projectId, studioUrl } from \"@/sanity/lib/api\";\r\nimport { pageStructure, singletonPlugin } from \"@/sanity/plugins/settings\";\r\nimport { assistWithPresets } from \"@/sanity/plugins/assist\";\r\nimport author from \"@/sanity/schemas/documents/author\";\r\nimport post from \"@/sanity/schemas/documents/post\";\r\nimport settings from \"@/sanity/schemas/singletons/settings\";\r\nimport { resolveHref } from \"@/sanity/lib/utils\";\r\n\r\nconst homeLocation = {\r\n  title: \"Home\",\r\n  href: \"/\",\r\n} satisfies DocumentLocation;\r\n\r\nexport default defineConfig({\r\n  basePath: studioUrl,\r\n  projectId,\r\n  dataset,\r\n  schema: {\r\n    types: [\r\n      // Singletons\r\n      settings,\r\n      // Documents\r\n      post,\r\n      author,\r\n    ],\r\n  },\r\n  plugins: [\r\n    presentationTool({\r\n      resolve: {\r\n        mainDocuments: defineDocuments([\r\n          {\r\n            route: \"/posts/:slug\",\r\n            filter: `_type == \"post\" && slug.current == $slug`,\r\n          },\r\n        ]),\r\n        locations: {\r\n          settings: defineLocations({\r\n            locations: [homeLocation],\r\n            message: \"This document is used on all pages\",\r\n            tone: \"caution\",\r\n          }),\r\n          post: defineLocations({\r\n            select: {\r\n              title: \"title\",\r\n              slug: \"slug.current\",\r\n            },\r\n            resolve: (doc) => ({\r\n              locations: [\r\n                {\r\n                  title: doc?.title || \"Untitled\",\r\n                  href: resolveHref(\"post\", doc?.slug)!,\r\n                },\r\n                homeLocation,\r\n              ],\r\n            }),\r\n          }),\r\n        },\r\n      },\r\n      previewUrl: { previewMode: { enable: \"/api/draft-mode/enable\" } },\r\n    }),\r\n    structureTool({ structure: pageStructure([settings]) }),\r\n    // Configures the global \"new document\" button, and document actions, to suit the Settings document singleton\r\n    singletonPlugin([settings.name]),\r\n    // Add an image asset source for Unsplash\r\n    unsplashImageAsset(),\r\n    // Sets up AI Assist with preset prompts\r\n    // https://www.sanity.io/docs/ai-assist\r\n    assistWithPresets(),\r\n    // Vision lets you query your content with GROQ in the studio\r\n    // https://www.sanity.io/docs/the-vision-plugin\r\n    process.env.NODE_ENV === \"development\" &&\r\n      visionTool({ defaultApiVersion: apiVersion }),\r\n  ].filter(Boolean) as PluginOptions[],\r\n});\r\n"],"names":[],"mappings":";;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAEA;AAMA;AAPA;AA6EI,6DAA6D;AAC7D,+CAA+C;AAC/C;AApFJ;;CAEC,GACD;AAJA;;;;;;;;;;;;;AAuBA,MAAM,eAAe;IACnB,OAAO;IACP,MAAM;AACR;uCAEe,CAAA,GAAA,+WAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,UAAU,uHAAA,CAAA,YAAS;IACnB,WAAA,uHAAA,CAAA,YAAS;IACT,SAAA,uHAAA,CAAA,UAAO;IACP,QAAQ;QACN,OAAO;YACL,aAAa;YACb,+IAAA,CAAA,UAAQ;YACR,YAAY;YACZ,yIAAA,CAAA,UAAI;YACJ,2IAAA,CAAA,UAAM;SACP;IACH;IACA,SAAS;QACP,CAAA,GAAA,6XAAA,CAAA,mBAAgB,AAAD,EAAE;YACf,SAAS;gBACP,eAAe,CAAA,GAAA,6XAAA,CAAA,kBAAe,AAAD,EAAE;oBAC7B;wBACE,OAAO;wBACP,QAAQ,CAAC,wCAAwC,CAAC;oBACpD;iBACD;gBACD,WAAW;oBACT,UAAU,CAAA,GAAA,6XAAA,CAAA,kBAAe,AAAD,EAAE;wBACxB,WAAW;4BAAC;yBAAa;wBACzB,SAAS;wBACT,MAAM;oBACR;oBACA,MAAM,CAAA,GAAA,6XAAA,CAAA,kBAAe,AAAD,EAAE;wBACpB,QAAQ;4BACN,OAAO;4BACP,MAAM;wBACR;wBACA,SAAS,CAAC,MAAQ,CAAC;gCACjB,WAAW;oCACT;wCACE,OAAO,KAAK,SAAS;wCACrB,MAAM,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,KAAK;oCACjC;oCACA;iCACD;4BACH,CAAC;oBACH;gBACF;YACF;YACA,YAAY;gBAAE,aAAa;oBAAE,QAAQ;gBAAyB;YAAE;QAClE;QACA,CAAA,GAAA,+WAAA,CAAA,gBAAa,AAAD,EAAE;YAAE,WAAW,CAAA,GAAA,iIAAA,CAAA,gBAAa,AAAD,EAAE;gBAAC,+IAAA,CAAA,UAAQ;aAAC;QAAE;QACrD,6GAA6G;QAC7G,CAAA,GAAA,iIAAA,CAAA,kBAAe,AAAD,EAAE;YAAC,+IAAA,CAAA,UAAQ,CAAC,IAAI;SAAC;QAC/B,yCAAyC;QACzC,CAAA,GAAA,8XAAA,CAAA,qBAAkB,AAAD;QACjB,wCAAwC;QACxC,uCAAuC;QACvC,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;QAGhB,oDAAyB,iBACvB,CAAA,GAAA,oXAAA,CAAA,aAAU,AAAD,EAAE;YAAE,mBAAmB,uHAAA,CAAA,aAAU;QAAC;KAC9C,CAAC,MAAM,CAAC;AACX"}},
    {"offset": {"line": 923, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}