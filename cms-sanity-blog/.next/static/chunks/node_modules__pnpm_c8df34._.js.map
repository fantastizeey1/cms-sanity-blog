{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"skipWhile.js","sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/rxjs%407.8.1/node_modules/rxjs/src/internal/operators/skipWhile.ts"],"sourcesContent":["import { Falsy, MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function skipWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => true): OperatorFunction<T, never>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * Skips all the notifications with a truthy predicate. It will not skip the notifications when the predicate is falsy.\n * It can also be skipped using index. Once the predicate is true, it will not be called again.\n *\n * ## Example\n *\n * Skip some super heroes\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from(['Green Arrow', 'SuperMan', 'Flash', 'SuperGirl', 'Black Canary'])\n * // Skip the heroes until SuperGirl\n * const example = source.pipe(skipWhile(hero => hero !== 'SuperGirl'));\n * // output: SuperGirl, Black Canary\n * example.subscribe(femaleHero => console.log(femaleHero));\n * ```\n *\n * Skip values from the array until index 5\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from([1, 2, 3, 4, 5, 6, 7, 9, 10]);\n * const example = source.pipe(skipWhile((_, i) => i !== 5));\n * // output: 6, 7, 9, 10\n * example.subscribe(value => console.log(value));\n * ```\n *\n * @see {@link last}\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return A function that returns an Observable that begins emitting items\n * emitted by the source Observable when the specified predicate becomes false.\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => (taking || (taking = !predicate(value, index++))) && subscriber.next(value))\n    );\n  });\n}\n"],"names":[],"mappings":";;;AACA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;;;AAiD1D,SAAU,SAAS,CAAI,SAA+C;IAC1E,gOAAO,UAAA,AAAO,EAAC,SAAC,MAAM,EAAE,UAAU;QAChC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,SAAS,6OACd,2BAAA,AAAwB,EAAC,UAAU,EAAE,SAAC,KAAK;YAAK,OAAA,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;QAA3E,CAA2E,CAAC,CAC7H,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","ignoreList":[0]}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"file":"PostMessagePreviewSnapshots.js","sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/%40sanity%2Bpresentation%401.19.8_%40emotion%2Bis-prop-valid%401.2.2_%40sanity%2Bcolor%403.0.6_debug%404.4.0_reac_epti5vobal4q5xpl7pmbcf6wnm/node_modules/%40sanity/presentation/src/editor/PostMessagePreviewSnapshots.tsx"],"sourcesContent":["import type {PreviewSnapshot} from '@repo/visual-editing-helpers'\nimport type {ClientPerspective} from '@sanity/client'\nimport {memo, useEffect, useMemo, type FC} from 'react'\nimport {\n  combineLatest,\n  debounceTime,\n  filter,\n  map,\n  merge,\n  NEVER,\n  share,\n  skipWhile,\n  Subject,\n  switchMap,\n  takeUntil,\n} from 'rxjs'\nimport {getDraftId, getPublishedId} from 'sanity'\nimport {useDocumentPreviewStore, useSchema, type PreviewValue} from '../internals'\nimport type {VisualEditingConnection} from '../types'\n\ntype Ref = {\n  _id: string\n  _type: string\n}\n\nexport interface PostMessagePreviewsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n  refs: Ref[]\n}\n\nconst PostMessagePreviews: FC<PostMessagePreviewsProps> = (props) => {\n  const {comlink, refs, perspective} = props\n  const documentPreviewStore = useDocumentPreviewStore()\n  const schema = useSchema()\n\n  const refsSubject = useMemo(() => new Subject<Ref[]>(), [])\n\n  const previews$ = useMemo(() => {\n    return refsSubject.asObservable().pipe(\n      switchMap((refs) => {\n        return combineLatest(\n          refs.map((ref) => {\n            const draftRef = {...ref, _id: getDraftId(ref._id)}\n            const draft$ =\n              perspective === 'previewDrafts'\n                ? documentPreviewStore\n                    .observeForPreview(draftRef, schema.get(draftRef._type)!)\n                    .pipe(\n                      // Share to prevent double subscribe in the merge\n                      share(),\n                      // Don't emit if no snapshot is returned\n                      skipWhile((p) => p.snapshot === null),\n                    )\n                : // Don't emit if not displaying drafts\n                  NEVER\n\n            const publishedRef = {...ref, _id: getPublishedId(ref._id)}\n            const published$ = documentPreviewStore.observeForPreview(\n              publishedRef,\n              schema.get(publishedRef._type)!,\n            )\n\n            return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(\n              filter((p) => !!p.snapshot),\n              map((p) => {\n                const snapshot = p.snapshot as PreviewValue & {\n                  _id: string\n                }\n                return {\n                  _id: getPublishedId(snapshot._id),\n                  title: snapshot.title,\n                  subtitle: snapshot.subtitle,\n                  description: snapshot.description,\n                  imageUrl: snapshot.imageUrl,\n                } as PreviewSnapshot\n              }),\n            )\n          }),\n        )\n      }),\n      debounceTime(0),\n    )\n  }, [documentPreviewStore, refsSubject, schema, perspective])\n\n  useEffect(() => {\n    const sub = previews$.subscribe((snapshots) => {\n      comlink.post('presentation/preview-snapshots', {snapshots})\n    })\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [comlink, previews$])\n\n  useEffect(() => {\n    refsSubject.next(refs)\n  }, [refs, refsSubject])\n\n  return null\n}\n\nexport default memo(PostMessagePreviews)\n"],"names":["PostMessagePreviews","props","comlink","refs","perspective","documentPreviewStore","useDocumentPreviewStore","schema","useSchema","refsSubject","useMemo","Subject","previews$","asObservable","pipe","switchMap","combineLatest","map","ref","draftRef","_id","getDraftId","draft$","observeForPreview","get","_type","share","skipWhile","p","snapshot","NEVER","publishedRef","getPublishedId","published$","merge","takeUntil","filter","title","subtitle","description","imageUrl","debounceTime","useEffect","sub","subscribe","snapshots","post","unsubscribe","next","memo"],"mappings":";;;;;;;;;;;;;;;;;;;AA+BA,MAAMA,sBAAqDC,CAAU,UAAA;IAC7D,MAAA,EAACC,OAAAA,EAASC,IAAAA,EAAMC,WAAAA,EAAeH,GAAAA,OAC/BI,2BAAuBC,0YAAAA,CAAAA,IACvBC,6XAASC,YAAAA,KAETC,iVAAcC,UAAAA;oDAAQ,IAAM,oNAAIC,UAAAA,CAAe;mDAAG,CAAA,CAAE,GAEpDC,+UAAYF,UAAAA;kDAAQ,IACjBD,YAAYI,YAAAA,CAAAA,EAAeC,IAAAA,KAChCC,2OAAAA;0DAAWZ,CAAAA,iPACFa,gBAAAA,EACLb,OAAKc,GAAAA;kEAAKC,CAAQ,QAAA;4BAChB,MAAMC,WAAW;gCAAC,GAAGD,GAAAA;gCAAKE,MAAKC,gYAAAA,EAAWH,IAAIE,GAAG;4BAC3CE,GAAAA,SACJlB,gBAAgB,kBACZC,qBACGkB,iBAAAA,CAAkBJ,UAAUZ,OAAOiB,GAAAA,CAAIL,SAASM,KAAK,CAAE,EACvDX,IAAAA,CAAAA,iDAAAA;6BAECY,sOAAAA,CAAM,IAAA,wCAAA;+PAENC,YAAAA;0EAAWC,CAAAA,IAAMA,EAAEC,QAAAA,KAAa,IAAI;4EACtC,sCAAA;4BAEFC,oOAAAA,EAEAC,eAAe;gCAAC,GAAGb,GAAAA;gCAAKE,yXAAKY,iBAAAA,EAAed,IAAIE,GAAG;4BAAA,GACnDa,aAAa5B,qBAAqBkB,iBAAAA,CACtCQ,cACAxB,OAAOiB,GAAAA,CAAIO,aAAaN,KAAK,CAC/B;4BAEA,uOAAOS,QAAAA,EAAMD,WAAWnB,IAAAA,oOAAKqB,YAAAA,EAAUb,MAAM,CAAC,GAAGA,MAAM,EAAER,IAAAA,iOACvDsB,SAAAA;0EAAQR,CAAAA,MAAM,CAAC,CAACA,IAAEC,QAAQ;uSAC1BZ,MAAAA;0EAAKW,CAAM,QAAA;oCACT,MAAMC,WAAWD,IAAEC,QAAAA;oCAGZ,OAAA;wCACLT,KAAKY,qYAAAA,EAAeH,SAAST,GAAG;wCAChCiB,OAAOR,SAASQ,KAAAA;wCAChBC,UAAUT,SAASS,QAAAA;wCACnBC,aAAaV,SAASU,WAAAA;wCACtBC,UAAUX,SAASW,QAAAA;oCACrB;gCAAA,CACD,CACH;;wBAAA,CACD,CACH,CACD;;gSACDC,eAAAA,EAAa,CAAC,CAChB;iDACC;QAACpC;QAAsBI;QAAaF;QAAQH,WAAW;KAAC;IAE3DsC,0UAAAA,YAAAA;yCAAU,MAAM;YACRC,MAAAA,MAAM/B,UAAUgC,SAAAA;qDAAWC,CAAc,cAAA;oBAC7C3C,QAAQ4C,IAAAA,CAAK,kCAAkC;wBAACD;oBAAAA,CAAU;gBAAA,CAC3D;;YAED;iDAAO,MAAM;oBACXF,IAAII,WAAAA,CAAY;gBAClB;;QAAA;wCACC;QAAC7C;QAASU,SAAS;KAAC,sUAEvB8B,YAAAA;yCAAU,MAAM;YACdjC,YAAYuC,IAAAA,CAAK7C,IAAI;QACpB;wCAAA;QAACA;QAAMM,WAAW;KAAC,GAEf;AACT;AAEA,IAAewC,iWAAAA,OAAAA,EAAKjD,mBAAmB","ignoreList":[0]}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}