{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index3.mjs","sources":["file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/paneRouter/PaneRouterProvider.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/PaneResolutionError.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/assignId.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/createPaneResolver.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/memoBind.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/resolveIntent.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/structureResolvers/useResolvedPanes.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/intentResolver/utils.ts","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/StructureError.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/panes/unknown/UnknownPaneType.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/panes/StructureToolPane.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/StructureTitle.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/StructureTool.tsx","file://C%3A/Users/fanta/Desktop/blog/cms-sanity-blog/node_modules/.pnpm/sanity%403.67.1_%40emotion%2Bis-prop-valid%401.2.2_%40types%2Bnode%4022.10.2_%40types%2Breact%4018.3.17_react-dom_5ydo4m4kut47iawfyfyzcg2twu/node_modules/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {toString as pathToString} from '@sanity/util/paths'\nimport {omit} from 'lodash'\nimport {type ReactNode, useCallback, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from '../../types'\nimport {usePaneLayout} from '../pane/usePaneLayout'\nimport {BackLink} from './BackLink'\nimport {ChildLink} from './ChildLink'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {type PaneRouterContextValue} from './types'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent, resolvePathFromState} = useRouter()\n  const routerState = useRouterState()\n  const {panes, expand} = usePaneLayout()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes],\n  )\n  const lastPane = useMemo(() => panes?.[panes.length - 2], [panes])\n\n  const groupIndex = index - 1\n\n  const createNextRouterState = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...(routerState || {}), panes: nextPanes}\n\n      return nextRouterState\n    },\n    [groupIndex, routerPaneGroups, routerState, siblingIndex],\n  )\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const nextRouterState = createNextRouterState(modifier)\n      setTimeout(() => navigate(nextRouterState), 0)\n      return nextRouterState\n    },\n    [createNextRouterState, navigate],\n  )\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const nextRouterState = createNextRouterState((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n\n      return resolvePathFromState(nextRouterState)\n    },\n    [createNextRouterState, resolvePathFromState, siblingIndex],\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {template: template.id, parentRefPath: pathToString(parentRefPath), type},\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups],\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      // Only pass if this is not the first pane\n      BackLink: flatIndex ? BackLink : undefined,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings,\n        )\n      },\n\n      // Removes all panes to the right including current\n      closeCurrentAndAfter: (expandLast = true): void => {\n        if (expandLast && lastPane) {\n          expand(lastPane.element)\n        }\n        navigate({\n          panes: [...routerPaneGroups.slice(0, groupIndex)],\n        })\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // A function that returns a path with the given parameters\n      createPathWithParams,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      siblingIndex,\n      payload,\n      params,\n      routerPaneGroups,\n      handleEditReference,\n      setParams,\n      setPayload,\n      createPathWithParams,\n      navigateIntent,\n      modifyCurrentGroup,\n      lastPane,\n      navigate,\n      expand,\n    ],\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n","import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined>\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const routerStateSubject = useMemo(() => new ReplaySubject<RouterState>(1), [])\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {isRecord, Translate, useTranslation} from 'sanity'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n  const {t} = useTranslation(structureLocaleNamespace)\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title={t('panes.unknown-pane-type.title')} />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              <Translate\n                t={t}\n                i18nKey=\"panes.unknown-pane-type.unknown-type.text\"\n                values={{type}}\n              />\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              <Translate t={t} i18nKey=\"panes.unknown-pane-type.missing-type.text\" />\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {isEqual} from 'lodash'\nimport {lazy, memo, Suspense} from 'react'\n\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {type PaneNode} from '../types'\nimport {LoadingPane} from './loading'\nimport {UnknownPane} from './unknown'\n\ninterface StructureToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined>\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document/pane')),\n  documentList: lazy(() => import('./documentList/pane')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const StructureToolPane = memo(\n  function StructureToolPane(props: StructureToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next},\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  },\n)\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const editState = useEditState(documentId, documentType)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: true,\n    schemaType,\n    value: documentValue,\n  })\n\n  const documentTitle = isNewDocument\n    ? t('browser-document-title.new-document', {\n        schemaType: schemaType?.title || schemaType?.name,\n      })\n    : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["emptyArray","PaneRouterProvider","props","$","_c","children","flatIndex","index","params","payload","siblingIndex","navigate","navigateIntent","resolvePathFromState","useRouter","routerState","useRouterState","panes","expand","usePaneLayout","t0","routerPaneGroups","t1","length","lastPane","groupIndex","t2","modifier","currentGroup","currentItem","nextGroup","nextPanes","slice","__spreadProps","__spreadValues","createNextRouterState","t3","modifier_0","nextRouterState_0","setTimeout","nextRouterState","modifyCurrentGroup","t4","nextParams","nextRouterState_1","siblings","item","createPathWithParams","t5","nextPayload","siblings_0","item_0","setPayload","t6","nextParams_0","siblings_1","item_1","setParams","t7","t8","id","parentRefPath","type","template","pathToString","handleEditReference","t9","t10","t11","BackLink","undefined","t12","t13","t14","opts","_temp","t15","element","options","siblings_3","item_3","duplicatedItem","t16","viewId","restParams","omit","view","t17","hasGroupSiblings","groupLength","routerPanesState","ChildLink","ReferenceChildLink","ParameterizedLink","replaceCurrent","closeCurrent","closeCurrentAndAfter","duplicateCurrent","setView","ctx","t18","siblings_2","item_2","filter","sibling","PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","map","i","depthIndex","canHandleIntent","pane","child","items","Promise","all","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","loadingPanePath","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","routerStateSubject","useMemo","ReplaySubject","routerPanes$","asObservable","_routerState","state","useEffect","useResolvedPanes","error","setError","useState","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp4","subscribe","unsubscribe","reduce","_temp2","groupsLen","itemId","active","childItemId","LOADING_PANE","selected","_temp3","pane_0","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","maybeIntent","useDocumentStore","cancelled","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","showStack","SerializeError","includes","handleReload","SyncIcon","segment","reload","UnknownPane","isSelected","paneKey","paneMap","component","lazy","document","documentList","list","StructureToolPane","PaneComponent","prevParams","prevPayload","keys","Object","NoDocumentTypesScreen","DocumentTitle","documentType","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","value","isLoading","previewValueIsLoading","useValuePreview","enabled","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","PassthroughTitle","StructureTitle","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","paneIndex","paneParams","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},
    {"offset": {"line": 1274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}